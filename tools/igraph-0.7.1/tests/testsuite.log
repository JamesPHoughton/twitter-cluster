## -------------------------------- ##
## igraph 0.7.1 test suite: igraph. ##
## -------------------------------- ##

testsuite: command line was:
  $ testsuite 

## ---------- ##
## ChangeLog. ##
## ---------- ##


## --------- ##
## Platform. ##
## --------- ##

hostname = marketdepth.mit.edu
uname -m = x86_64
uname -r = 2.6.32-504.8.1.el6.x86_64
uname -s = Linux
uname -v = #1 SMP Fri Dec 19 12:09:25 EST 2014

/usr/bin/uname -p = unknown
/bin/uname -X     = unknown

/bin/arch              = x86_64
/usr/bin/arch -k       = unknown
/usr/convex/getsysinfo = unknown
/usr/bin/hostinfo      = unknown
/bin/machine           = unknown
/usr/bin/oslevel       = unknown
/bin/universe          = unknown

PATH: /home/houghton/tools/igraph-0.7.1/tests
PATH: /home/houghton/venv/bin
PATH: /home/UTL
PATH: /home/TOOL
PATH: /usr/lib64/qt-3.3/bin
PATH: /usr/local/bin
PATH: /bin
PATH: /usr/bin
PATH: /usr/local/sbin
PATH: /usr/sbin
PATH: /sbin

testsuite: atconfig:
| # Configurable variable values for building test suites.
| # Generated by ./config.status.
| # Copyright (C) 2012 Free Software Foundation, Inc.
| 
| # The test suite will define top_srcdir=/../.. etc.
| at_testdir='tests'
| abs_builddir='/home/houghton/tools/igraph-0.7.1/tests'
| at_srcdir='.'
| abs_srcdir='/home/houghton/tools/igraph-0.7.1/tests'
| at_top_srcdir='..'
| abs_top_srcdir='/home/houghton/tools/igraph-0.7.1'
| at_top_build_prefix='../'
| abs_top_builddir='/home/houghton/tools/igraph-0.7.1'
| 
| # Backward compatibility with Autotest <= 2.59b:
| at_top_builddir=$at_top_build_prefix
| 
| AUTOTEST_PATH='tests'
| 
| SHELL=${CONFIG_SHELL-'/bin/sh'}

testsuite: atlocal:
| # tests/atlocal.  Generated from atlocal.in by configure.
| # Configurable variable values for igraph test suite. Taken from bison source.
| # Copyright 2000, 2001, 2002 Free Software Foundation, Inc.
| 
| # We need a C compiler.
| CC='gcc'
| CFLAGS='-g -O2 -I/usr/include/libxml2  -Wall '
| 
| # We need `config.h'.
| CPPFLAGS="-I$abs_top_builddir -g -O2 -I/usr/include/libxml2"
| 

## ---------------- ##
## Tested programs. ##
## ---------------- ##

## ------------------ ##
## Running the tests. ##
## ------------------ ##
testsuite: starting at: Mon Apr 27 16:16:15 EDT 2015
1. Simple version query (igraph_version):  (version.at:26): ok     (0m0.070s 0m0.015s)
2. Vector (vector_t):  (types.at:24): ok     (0m0.078s 0m0.021s)
3. Vector (more) (vector_t):  (types.at:29): ok     (0m0.070s 0m0.017s)
4. Vector (even more) (vector_t):  (types.at:34): ok     (0m0.067s 0m0.015s)
5. Matrix (matrix_t):  (types.at:39): ok     (0m0.078s 0m0.011s)
6. Matrix (more) (matrix_t):  (types.at:44): ok     (0m0.085s 0m0.015s)
7. Matrix (even more) (matrix_t):  (types.at:49): ok     (0m0.065s 0m0.018s)
8. Double ended queue (dqueue_t):  (types.at:54): ok     (0m0.070s 0m0.016s)
9. Vector of pointers (vector_ptr_t):  (types.at:59): ok     (0m0.069s 0m0.021s)
10. Stack (stack_t):  (types.at:64): ok     (0m0.063s 0m0.017s)
11. Heap (heap_t):  (types.at:69): ok     (0m0.067s 0m0.012s)
12. Indexed heap (indheap_t):  (types.at:74): ok     (0m0.060s 0m0.018s)
13. Doubly indexed heap (d_indheap_t):  (types.at:79): ok     (0m0.073s 0m0.014s)
14. String vector (igraph_strvector_t):  (types.at:84): ok     (0m0.073s 0m0.016s)
15. Trie (igraph_trie_t):  (types.at:89): ok     (0m0.075s 0m0.013s)
16. Partial Sum-Tree (igraph_psumtree_t):  (types.at:95): ok     (0m0.075s 0m0.018s)
17. Three dimensional array (igraph_array3_t):  (types.at:100): ok     (0m0.066s 0m0.016s)
18. Hash table (string->string) (igraph_hashtable_t):  (types.at:105): ok     (0m0.075s 0m0.013s)
19. Special heap for minimum cuts (igraph_i_cutheap_t):  (types.at:111): ok     (0m0.071s 0m0.030s)
20. Set (igraph_set_t):  (types.at:117): ok     (0m0.067s 0m0.020s)
21. 2-way heap (igraph_2wheap_t):  (types.at:123): ok     (0m0.072s 0m0.020s)
22. Sparse matrix (igraph_sparsemat_t):  (types.at:128): ok     (0m0.075s 0m0.016s)
23. Sparse matrix, multiplications (igraph_sparsemat_t):  (types.at:133): ok     (0m0.088s 0m0.014s)
24. Sparse matrix, indexing (igraph_sparsemat_t):  (types.at:139): ok     (0m0.088s 0m0.018s)
25. Sparse matrix, solvers (igraph_sparsemat_t):  (types.at:145): ok     (0m0.077s 0m0.023s)
26. Sparse matrix, ARPACK eigensolver (igraph_sparsemat_t):  (types.at:151): ok     (0m0.082s 0m0.020s)
27. Sparse matrix, conversion to dense (igraph_sparsemat_t):  (types.at:156): ok     (0m0.066s 0m0.015s)
28. Sparse matrix, min & max (igraph_sparsemat_t):  (types.at:161): ok     (0m0.066s 0m0.019s)
29. Sparse matrix, other operations (igraph_sparsemat_t):  (types.at:166): ok     (0m0.079s 0m0.016s)
30. Sparse matrix, multiplications with dense (igraph_sparsemat_t):  (types.at:171): ok     (0m0.074s 0m0.015s)
31. Sparse matrix, is symmetric? (igraph_sparsemat_t):  (types.at:176): ok     (0m0.071s 0m0.014s)
32. Another sparse matrix (igraph_spmatrix_t):  (types.at:181): ok     (0m0.081s 0m0.015s)
33. Arbitrarily big integers (igraph_biguint_t):  (types.at:186): ok     (0m0.066s 0m0.023s)
34. Marked double ended queue (igraph_marked_queue_t):  (types.at:191): ok     (0m0.075s 0m0.010s)
35. Complex numbers (igraph_complex_t):  (types.at:196): ok     (0m0.081s 0m0.018s)
36. Creating an empty graph (igraph_empty):  (basic.at:26): ok     (0m0.066s 0m0.019s)
37. Copying a graph (igraph_copy):  (basic.at:31): ok     (0m0.069s 0m0.013s)
38. Adding edges to a graph (igraph_add_edges):  (basic.at:36): ok     (0m0.067s 0m0.017s)
39. Adding vertices (igraph_add_vertices):  (basic.at:42): ok     (0m0.062s 0m0.021s)
40. Deleting edges (igraph_delete_edges):  (basic.at:47): ok     (0m0.072s 0m0.012s)
41. Deleting vertices (igraph_delete_vertices):  (basic.at:52): ok     (0m0.069s 0m0.013s)
42. Neighbors (igraph_neighbors):  (basic.at:57): ok     (0m0.069s 0m0.015s)
43. Is the graph directed? (igraph_is_directed):  (basic.at:62): ok     (0m0.061s 0m0.019s)
44. Degree of the vertices (igraph_degree):  (basic.at:67): ok     (0m0.074s 0m0.023s)
45. Query edge ids (igraph_get_eid):  (basic.at:72): ok     (0m0.064s 0m0.022s)
46. Query many edge ids (igraph_get_eids):  (basic.at:77): ok     (0m0.086s 0m0.022s)
47. Vertices in a vector (igraph_vs_vector):  (iterators.at:24): ok     (0m0.065s 0m0.019s)
48. Non-adjacent vertices (igraph_vs_nonadj):  (iterators.at:29): ok     (0m0.068s 0m0.016s)
49. Sequence (igraph_vs_seq):  (iterators.at:34): ok     (0m0.066s 0m0.017s)
50. Edges given by end points (igraph_es_pairs):  (iterators.at:49): ok     (0m0.069s 0m0.014s)
51. Edges in a path (igraph_es_path):  (iterators.at:54): ok     (0m0.070s 0m0.012s)
52. Simple graph creation (igraph_create):  (structure_generators.at:24): ok     (0m0.064s 0m0.017s)
53. Barabasi-Albert model (igraph_barabasi_game): (structure_generators.at:29): ok     (0m0.072s 0m0.014s)
54. More Barabasi-Albert model (igraph_barabasi_game): (structure_generators.at:34): ok     (0m0.069s 0m0.014s)
55. Erdos-Renyi model (igraph_erdos_renyi_game): (structure_generators.at:39): ok     (0m0.591s 0m0.048s)
56. Degree sequence (igraph_degree_sequence_game): (structure_generators.at:44): ok     (0m0.063s 0m0.026s)
57. k-regular graphs (igraph_k_regular_game): (structure_generators.at:49): ok     (0m0.077s 0m0.019s)
58. Growing random (igraph_growing_random_game): (structure_generators.at:54): ok     (0m0.071s 0m0.010s)
59. Preference model (igraph_preference_game): (structure_generators.at:59): ok     (0m0.138s 0m0.021s)
60. From adjacency matrix (igraph_adjacency): (structure_generators.at:64): ok     (0m0.062s 0m0.018s)
61. From weighted adjacency matrix (igraph_weighted_adjacency): (structure_generators.at:69): ok     (0m0.063s 0m0.023s)
62. Star graph (igraph_star): (structure_generators.at:74): ok     (0m0.064s 0m0.017s)
63. Lattice graph (igraph_lattice): (structure_generators.at:79): ok     (0m0.066s 0m0.020s)
64. Ring graph (igraph_ring): (structure_generators.at:84): ok     (0m0.071s 0m0.016s)
65. Tree graph (igraph_tree): (structure_generators.at:89): ok     (0m0.067s 0m0.011s)
66. Full graph (igraph_full): (structure_generators.at:94): ok     (0m0.065s 0m0.013s)
67. Graph atlas (igraph_atlas): (structure_generators.at:99): ok     (0m0.065s 0m0.015s)
68. Small graph (igraph_small): (structure_generators.at:104): ok     (0m0.065s 0m0.017s)
69. Geomeric random graphs (igraph_grg_game): (structure_generators.at:109): ok     (0m0.065s 0m0.017s)
70. Graphs in LCF notation (igraph_lcf{,_vector}): (structure_generators.at:114): ok     (0m0.061s 0m0.021s)
71. Watts-Strogatz graphs (igraph_watts_strogatz_game): (structure_generators.at:119): ok     (0m0.099s 0m0.021s)
72. Two vertices connected by an edge: (structural_properties.at:24): ok     (0m0.063s 0m0.019s)
73. Density of a graph (igraph_density): (structural_properties.at:29): ok     (0m0.066s 0m0.021s)
74. Diameter of a graph (igraph_diameter): (structural_properties.at:34): ok     (0m0.068s 0m0.021s)
75. Average geodesic length (igraph_average_path_length):  (structural_properties.at:39): ok     (0m0.063s 0m0.017s)
76. Google PageRank (igraph_pagerank):  (structural_properties.at:44): ok     (0m0.078s 0m0.023s)
77. Random rewiring (igraph_rewire):  (structural_properties.at:49): ok     (0m0.072s 0m0.014s)
78. Get the shortest paths (igraph_get_shortest_paths):  (structural_properties.at:54): ok     (0m0.069s 0m0.019s)
79. Get the shortest paths #2 (igraph_get_shortest_paths):  (structural_properties.at:60): ok     (0m0.067s 0m0.016s)
80. Weighted shortest paths (Dijkstra):  (structural_properties.at:66): ok     (0m0.066s 0m0.018s)
81. Weighted shortest paths (Bellman-Ford):  (structural_properties.at:71): ok     (0m0.069s 0m0.016s)
82. Get the weighted shortest paths (Dijkstra):  (structural_properties.at:76): ok     (0m0.075s 0m0.017s)
83. Get all weighted shortest paths (Dijkstra):  (structural_properties.at:82): ok     (0m0.074s 0m0.016s)
84. Shortest path wrappers for single target node:  (structural_properties.at:88): ok     (0m0.066s 0m0.017s)
85. Betweenness (igraph_betweenness):  (structural_properties.at:94): ok     (0m0.202s 0m0.014s)
86. Betweenness, big integers (igraph_betweenness):  (structural_properties.at:99): ok     (0m0.497s 0m0.020s)
87. Edge betweenness (igraph_edge_betweenness):  (structural_properties.at:104): ok     (0m0.072s 0m0.011s)
88. Transitivity (igraph_transitivity):  (structural_properties.at:110): ok     (0m0.063s 0m0.018s)
89. Local transitivity (igraph_local_transitivity):  (structural_properties.at:115): ok     (0m0.069s 0m0.013s)
90. Reciprocity (igraph_reciprocity):  (structural_properties.at:120): ok     (0m0.062s 0m0.020s)
91. Minimum spanning tree (igraph_minimum_spanning_tree_*):  (structural_properties.at:125): ok     (0m0.065s 0m0.017s)
92. Cocitation and bibcoupling (igraph_cocitation,igraph_bibcoupling): (structural_properties.at:131): ok     (0m0.062s 0m0.019s)
93. Similarity coefficients (igraph_similarity_*): (structural_properties.at:136): ok     (0m0.071s 0m0.025s)
94. Simplification of non-simple graphs (igraph_simplify):  (structural_properties.at:141): ok     (0m0.068s 0m0.016s)
95. Topological sorting (igraph_topological_sorting, igraph_is_dag):  (structural_properties.at:146): ok     (0m0.072s 0m0.013s)
96. Feedback arc sets, Eades heuristics (igraph_feedback_arc_set):  (structural_properties.at:151): ok     (0m0.062s 0m0.023s)
97. Feedback arc sets, integer programming (igraph_feedback_arc_set):  (structural_properties.at:156): ok     (0m0.066s 0m0.022s)
98. Loop edges test (igraph_is_loop):  (structural_properties.at:161): ok     (0m0.072s 0m0.011s)
99. Multiple edges test (igraph_is_multiple):  (structural_properties.at:166): ok     (0m0.067s 0m0.015s)
100. Multiple edges test (igraph_has_multiple):  (structural_properties.at:171): ok     (0m0.063s 0m0.020s)
101. Girth (igraph_girth):  (structural_properties.at:176): ok     (0m0.065s 0m0.016s)
102. Convergence degree (igraph_convergence_degree):  (structural_properties.at:181): ok     (0m0.067s 0m0.019s)
103. Assortativity coefficient (igraph_assortativity):  (structural_properties.at:186): ok     (0m0.107s 0m0.019s)
104. Average nearest neighbor degree (igraph_avg_nearest_neighbor_degree):  (structural_properties.at:192): ok     (0m0.069s 0m0.018s)
105. Transitive closure of a DAG (igraph_transitive_closure_dag):  (structural_properties.at:197): ok     (0m0.069s 0m0.012s)
106. Eccentricity (igraph_eccentricity):  (structural_properties.at:203): ok     (0m0.063s 0m0.018s)
107. Radius (igraph_radius):  (structural_properties.at:209): ok     (0m0.067s 0m0.022s)
108. Decompose a graph (igraph_decompose): (components.at:24): ok     (0m0.070s 0m0.014s)
109. Biconnected components (igraph_biconnected_components): (components.at:29): ok     (0m0.069s 0m0.016s)
110. Grid layout (igraph_layout_grid, igraph_layout_grid_3d): (layout.at:24): ok     (0m0.066s 0m0.017s)
111. Large Graph Layout (igraph_layout_lgl): (layout.at:29): ok     (0m0.065s 0m0.022s)
112. Reingold-Tilford tree layout (igraph_layout_reingold_tilford): (layout.at:34): ok     (0m0.069s 0m0.014s)
113. Sugiyama layout (igraph_layout_sugiyama): (layout.at:40): ok     (0m0.070s 0m0.016s)
114. Multidimensional scaling (igraph_layout_mds): (layout.at:45): ok     (0m0.072s 0m0.015s)
115. Covering circle and sphere (igraph_i_layout_sphere_{2,3}d): (layout.at:50): ok     (0m0.069s 0m0.016s)
116. Merging layouts (igraph_i_layout_merge): (layout.at:55): ok     (0m0.333s 0m0.018s)
117. Merging layouts 2 (igraph_i_layout_merge): (layout.at:60): skipped (layout.at:63)
118. Merging layouts 3 (igraph_i_layout_merge): (layout.at:66): ok     (0m0.771s 0m0.016s)
119. Internal breadth-first search (igraph_i_bfs): (visitors.at:24): ok     (0m0.069s 0m0.015s)
120. Breadth-first search (igraph_bfs): (visitors.at:29): ok     (0m0.070s 0m0.013s)
121. The isomorphism class of a subgraph (igraph_isolass_subgraph) (topology.at:24): ok     (0m0.067s 0m0.016s)
122. The VF2 isomorphism algorithm (topology.at:29): ok     (0m0.117s 0m0.020s)
123. VF algorithm with compatibility functions (topology.at:34): ok     (0m0.071s 0m0.016s)
124. LAD subgraph isomorphism algorithm (topology.at:39): ok     (0m0.072s 0m0.014s)
125. Graphical degree sequences (topology.at:45): ok     (0m0.070s 0m0.014s)
126. RAND-ESU algorithm (igraph_motifs_randesu) (motifs.at:24): ok     (0m0.071s 0m0.013s)
127. Reading Pajek (igraph_read_graph_pajek): (foreign.at:24): ok     (0m0.066s 0m0.015s)
128. GraphML (igraph_{read,write}_graph_graphml): (foreign.at:29): ok     (0m0.071s 0m0.018s)
129. Writing Pajek (igraph_write_graph_pajek): (foreign.at:35): ok     (0m0.061s 0m0.023s)
130. Pajek with number of edges present (igraph_read_graph_pajek): (foreign.at:41): ok     (0m0.062s 0m0.023s)
131. Pajek, bipartite (igraph_read_graph_pajek): (foreign.at:46): ok     (0m0.064s 0m0.020s)
132. Pajek, bipartite incidence matrix (igraph_read_graph_pajek): (foreign.at:52): ok     (0m0.072s 0m0.019s)
133. Pajek, signed (igraph_read_graph_pajek): (foreign.at:58): ok     (0m0.071s 0m0.017s)
134. Pajek, writing bipartite graph (igraph_write_graph_pajek): (foreign.at:64): ok     (0m0.070s 0m0.012s)
135. Reading an LGL file (igraph_read_graph_lgl): (foreign.at:69): ok     (0m0.066s 0m0.018s)
136. Writing LGL (igraph_write_graph_lgl): (foreign.at:76): ok     (0m0.061s 0m0.020s)
137. Reading a graph from the graph database (igraph_read_graph_graphdb): (foreign.at:81): ok     (0m0.069s 0m0.015s)
138. Reading a GML file (igraph_read_graph_gml): (foreign.at:88): ok     (0m0.061s 0m0.020s)
139. Writing a DOT file (igraph_write_graph_dot): (foreign.at:93): ok     (0m0.062s 0m0.022s)
140. Different line endings: (foreign.at:98): ok     (0m0.068s 0m0.017s)
141. UNICET DL format: (foreign.at:105): ok     (0m0.073s 0m0.013s)
142. LEDA format: (foreign.at:111): ok     (0m0.073s 0m0.012s)
143. Convex hull calculation (igraph_convex_hull): (other.at:24): ok     (0m0.069s 0m0.015s)
144. Fitting power-law distributions (igraph_power_law_fit): (other.at:29): ok     (0m0.136s 0m0.017s)
145. Disjoint union (igraph_disjoint_union, igraph_dosjoint_union_many): (operators.at:24): ok     (0m0.072s 0m0.012s)
146. Union (igraph_union, igraph_union_many): (operators.at:31): ok     (0m0.076s 0m0.013s)
147. Intersection (igraph_intersection, igraph_intersection_many): (operators.at:37): ok     (0m0.072s 0m0.015s)
148. Intersection 2 (igraph_intersection, igraph_intersection_many): (operators.at:43): ok     (0m0.059s 0m0.023s)
149. Difference (igraph_difference): (operators.at:49): ok     (0m0.069s 0m0.019s)
150. Complementer (igraph_complementer): (operators.at:55): ok     (0m0.069s 0m0.018s)
151. Composition (igraph_compose): (operators.at:61): ok     (0m0.066s 0m0.023s)
152. Directed to undirected (igraph_to_undirected): (conversion.at:24): ok     (0m0.065s 0m0.018s)
153. Graphs from adjacency list (igraph_adjlist): (conversion.at:30): ok     (0m0.069s 0m0.014s)
154. Graph to Laplacian matrix (igraph_laplacian): (conversion.at:35): ok     (0m0.072s 0m0.020s)
155. Maximum flow value (igraph_maxflow_value):  (flow.at:24): ok     (0m0.427s 0m0.024s)
156. Maximum flow (igraph_maxflow):  (flow.at:29): ok     (0m0.446s 0m0.019s)
157. Minimum cut (igraph_mincut):  (flow.at:34): ok     (0m0.071s 0m0.016s)
158. Even-Tarjan reduction (igraph_even_tarjan_reduction):  (flow.at:39): ok     (0m0.419s 0m0.021s)
159. Dominator tree of a flow graph (igraph_dominator_tree):  (flow.at:44): ok     (0m0.068s 0m0.019s)
160. All s-t cuts of a graph (igraph_all_st_cuts):  (flow.at:50): ok     (0m0.080s 0m0.019s)
161. All minimal s-t cuts of a graph (igraph_all_st_mincuts):  (flow.at:56): ok     (0m0.071s 0m0.023s)
162. Gomory-Hu tree (igraph_gomory_hu_tree):  (flow.at:62): ok     (0m0.072s 0m0.016s)
163. Spinglass clustering (igraph_spinglass_community):  (community.at:24): skipped (community.at:26)
164. Walktrap community structure (igraph_walktrap_community):  (community.at:29): ok     (0m0.063s 0m0.022s)
165. Edge betweenness community structure (igraph_community_edge_betweenness):  (community.at:34): ok     (0m0.075s 0m0.021s)
166. Modularity optimization (igraph_community_fastgreedy):  (community.at:40): ok     (0m0.076s 0m0.013s)
167. Leading eigenvector community structure (igraph_community_leading_eigenvector) : (community.at:46): ok     (0m0.076s 0m0.025s)
168. Weighted leading eigenvector community structure (igraph_community_leading_eigenvector) : (community.at:52): ok     (0m0.079s 0m0.018s)
169. Leading eigenvector bug #1002140 test (igraph_community_leading_eigenvector) : (community.at:58): ok     (0m0.548s 0m0.136s)
170. Label propagation algorithm (igraph_community_label_propagation) : (community.at:64): ok     (0m0.069s 0m0.016s)
171. Multilevel community detection (igraph_community_multilevel) : (community.at:70): skipped (community.at:73)
172. Multilevel community detection, isolates (igraph_community_multilevel) : (community.at:76): ok     (0m0.058s 0m0.024s)
173. Modularity optimization, integer programming (igraph_community_optimal_modularity) : (community.at:81): ok     (0m0.607s 0m0.031s)
174. Infomap community structure (igraph_community_infomap) : (community.at:86): skipped (community.at:90)
175. Calculating cliques (igraph_cliques):  (cliques.at:26): ok     (0m0.069s 0m0.018s)
176. Additional test for maximal cliques (igraph_maximal_cliques): (cliques.at:31): ok     (0m0.078s 0m0.021s)
177. More maximal cliques (igraph_maximal_cliques): (cliques.at:37): ok     (0m0.067s 0m0.024s)
178. Maximal cliques 3 (igraph_maximal_cliques): (cliques.at:43): ok     (0m0.663s 0m0.015s)
179. Maximal cliques for a subset (igraph_maximal_cliques): (cliques.at:49): ok     (0m0.114s 0m0.017s)
180. Calculating independent vertex sets (igraph_independent_vertex_sets):  (cliques.at:55): ok     (0m0.072s 0m0.013s)
181. Symmetric matrix, LAPACK (igraph_eigen_matrix_symmetric): (eigen.at:24): ok     (0m0.069s 0m0.019s)
182. Symmetric matrix, ARPACK (igraph_eigen_matrix_symmetric): (eigen.at:30): ok     (0m0.077s 0m0.014s)
183. General matrix, LAPACK, LM, SM (igraph_eigen_matrix): (eigen.at:36): ok     (0m0.073s 0m0.016s)
184. General matrix, LAPACK, LR, SR (igraph_eigen_matrix): (eigen.at:42): ok     (0m0.073s 0m0.015s)
185. General matrix, LAPACK, LI, SI (igraph_eigen_matrix): (eigen.at:48): ok     (0m0.071s 0m0.018s)
186. General matrix, LAPACK, SELECT (igraph_eigen_matrix): (eigen.at:54): ok     (0m0.073s 0m0.016s)
187. Reading a Pajek file with attributes: (attributes.at:24): ok     (0m0.091s 0m0.020s)
188. Writing an attributed graph in GML and GraphML: (attributes.at:30): ok     (0m0.059s 0m0.024s)
189. Combining numeric attributes: (attributes.at:35): ok     (0m0.070s 0m0.019s)
190. Combining string attributes: (attributes.at:40): ok     (0m0.068s 0m0.019s)
191. Basic BLAS functions (igraph_blas_*): (arpack.at:24): ok     (0m0.067s 0m0.018s)
192. Dense symmetric eigenvalues and eigenvectors (igraph_lapack_dsyevr): (arpack.at:30): ok     (0m0.080s 0m0.014s)
193. Dense non-symmetric eigenvalues and eigenvectors (igraph_lapack_dgeev): (arpack.at:35): ok     (0m0.072s 0m0.021s)
194. Dense non-symmetric eigenvalues and eigenvectors (igraph_lapack_dgeevx): (arpack.at:40): ok     (0m0.071s 0m0.021s)
195. Solving linear systems with LU factorization (igraph_lapack_dgesv): (arpack.at:45): ok     (0m0.071s 0m0.017s)
196. Upper Hessenberg transformation (igraph_lapack_dgehrd): (arpack.at:51): ok     (0m0.065s 0m0.017s)
197. Eigenvector centrality (igraph_eigenvector_centrality): (arpack.at:57): ok     (0m0.066s 0m0.020s)
198. Non-symmetric ARPACK solver (igraph_arpack_rnsolve): (arpack.at:63): ok     (0m0.077s 0m0.012s)
199. Create bipartite graphs (igraph_create_bipartite): (bipartite.at:24): ok     (0m0.065s 0m0.019s)
200. Projection of bipartite graphs (igraph_bipartite_projection): (bipartite.at:30): ok     (0m0.074s 0m0.016s)
201. Centralization (igraph_centralization_*): (centralization.at:24): ok     (0m0.068s 0m0.021s)
202. Decision problem (igraph_is_separator):  (separators.at:24): ok     (0m0.069s 0m0.013s)
203. Decision problem, minimal separator (igraph_is_minimal separator):  (separators.at:29): ok     (0m0.068s 0m0.015s)
204. Minimal separators (igraph_all_minimal_ab_separators):  (separators.at:34): ok     (0m0.064s 0m0.019s)
205. Minimal separators, bug 1033045 (igraph_all_minimal_st_separators):  (separators.at:39): ok     (0m0.069s 0m0.014s)
206. Minimum size separators (igraph_minimum_size_separators):  (separators.at:44): ok     (0m0.081s 0m0.019s)
207. Cohesive blocking (igraph_cohesive_blocks):  (separators.at:50): ok     (0m0.140s 0m0.022s)
208. Fitting a hierarchical model (igraph_hrg_fit) : (hrg.at:24): ok     (0m0.267s 0m0.018s)
209. Consensus tree (igraph_hrg_consensus) : (hrg.at:29): skipped (hrg.at:31)
210. Missing edge prediction (igraph_hrg_predict) : (hrg.at:34): skipped (hrg.at:36)
211. Deterministic optimal imitation: (microscopic.at:23): ok     (0m0.069s 0m0.019s)
212. Stochastic imitation via uniform selection: (microscopic.at:28): ok     (0m0.077s 0m0.012s)
213. Stochastic imitation via roulette selection: (microscopic.at:33): ok     (0m0.076s 0m0.016s)
214. Moran process: (microscopic.at:38): ok     (0m0.070s 0m0.017s)
215. Simple error handling test : (mt.at:24): ok     (0m0.068s 0m0.015s)
216. Thread-safe ARPACK: (mt.at:29): ok     (0m0.080s 0m0.018s)
217. Solving the SCG problem (igraph_scg_grouping) : (scg.at:24): ok     (0m0.612s 0m0.043s)
218. Solving the SCG problem, adjacency matrix (igraph_scg_grouping) : (scg.at:30): ok     (0m0.057s 0m0.023s)
219. Solving the SCG problem, stochastic matrix (igraph_scg_grouping) : (scg.at:36): skipped (scg.at:39)
220. Solving the SCG problem, laplacian matrix (igraph_scg_grouping) : (scg.at:42): skipped (scg.at:45)
221. SCG semi-projectors, symmetric (igraph_scg_semiprojectors) : (scg.at:48): ok     (0m0.067s 0m0.016s)
222. SCG semi-projectors, stochastic (igraph_scg_semiprojectors) : (scg.at:54): skipped (scg.at:57)
223. SCG semi-projectors, laplacian (igraph_scg_semiprojectors) : (scg.at:60): skipped (scg.at:63)
224. SCG of a graph, adjacency matrix (igraph_scg) : (scg.at:66): ok     (0m0.075s 0m0.020s)
225. SCG of a graph, stochastic matrix (igraph_scg) : (scg.at:71): skipped (scg.at:73)
226. SCG of a graph, laplacian matrix (igraph_scg) : (scg.at:76): skipped (scg.at:78)
227. Random seed: (random.at:24): ok     (0m0.071s 0m0.011s)
228. MT19937 RNG on 64 bit machines: (random.at:29): ok     (0m0.068s 0m0.018s)
229. Exponentially distributed random numbers: (random.at:34): ok     (0m0.065s 0m0.018s)
230. Random sampling from consecutive sequence: (random.at:40): ok     (0m0.081s 0m0.010s)
231. Fisher-Yates shuffle: (random.at:45): ok     (0m0.066s 0m0.018s)
232. Regular qsort (igraph_qsort): (qsort.at:24): ok     (0m0.070s 0m0.016s)
233. qsort with extra argument (igraph_qsort_r): (qsort.at:29): ok     (0m0.066s 0m0.022s)
234. Maximum bipartite matching (igraph_maximum_bipartite_matching):  (matching.at:23): ok     (0m0.076s 0m0.016s)
testsuite: ending at: Mon Apr 27 16:16:49 EDT 2015
testsuite: test suite duration: 0h 0m 34s

## ------------- ##
## Test results. ##
## ------------- ##

222 tests were successful.
12 tests were skipped.
